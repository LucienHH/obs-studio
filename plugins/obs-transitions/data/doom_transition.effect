uniform float4x4 ViewProj;
uniform texture2d tex_a;
uniform texture2d tex_b;
uniform float progress;

uniform float frequency = 0.5;
uniform int bars = 30;
uniform float dripScale = 0.5;
uniform float noise = 0.1;
uniform float amplitude = 2.0;

sampler_state textureSampler {
    Filter = Linear;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct VertData {
    float4 pos : POSITION;
    float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in) {
    VertData vert_out;
    vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
    vert_out.uv  = v_in.uv;
    return vert_out;
}

float mod(float x, float y) {
    return x - y * floor(x / y);
}

float fract(float x) {
    return x - floor(x);
}

float rand(int num) {
    return fract(mod(float(num) * 67123.313, 12.0) * sin(float(num) * 10.3) * cos(float(num)));
}

float wave(int num) {
    float fn = float(num) * frequency * 0.1 * float(bars);
    return cos(fn * 0.5) * cos(fn * 0.13) * sin((fn + 10.0) * 0.3) / 2.0 + 0.5;
}

float drip(int num) {
    if (bars > 1) {
        return sin(float(num) / float(bars - 1) * 3.141592) * dripScale;
    }
    return 0.0;
}

float mix(float x, float y, float a) {
    return x * (1.0 - a) + y * a;
}

float pos(int num) {
    return (noise == 0.0 ? wave(num) : mix(wave(num), rand(num), noise)) + (dripScale == 0.0 ? 0.0 : drip(num));
}

float4 PSDoomMelt(VertData v_in) : TARGET {
    int bar = int(v_in.uv.x * float(bars));
  
    float scale = 1.0 + pos(bar) * amplitude;
    float phase = progress * scale;
    float posY = v_in.uv.y;

    float4 c;

    if (posY - phase > 0.0) {
        c = tex_a.Sample(textureSampler, v_in.uv + float2(0.0, lerp(0.0, -1.0, phase))); // Change the lerp range to -1.0
    } else {
        c = tex_b.Sample(textureSampler, v_in.uv);
    }

    return c;
}

technique Doom {
    pass {
        vertex_shader = VSDefault(v_in);
        pixel_shader = PSDoomMelt(v_in);
    }
}
